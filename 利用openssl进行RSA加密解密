利用openssl进行RSA加密解密
openssl是一个功能强大的工具包，它集成了众多密码算法及实用工具。我们即可以利用它提供的命令台工具生成密钥、证书来加密解密文件，也可以在利用其提供的API接口在代码中对传输信息进行加密。
RSA是一个非对称加密算法。简单说来，非对称加密算法就是说加密解密一个文件需要有两个密钥，一个用来加密，为公钥，一个用来解密，为私钥。证书可以用来授权公钥的使用。
今天小研究了下openssl的rsa加密，其中主要涉及利用公钥和密钥加解密文件，没有涉及对证书的操作。想要集体了解的可以去：
http://www.openssl.org/
http://blog.csdn.net/jiangsq12345/article/details/6066275
---------------------------------------------------------------------------------------------------------------------
首先介绍下命令台下openssl工具的简单使用：
生成一个密钥：
openssl genrsa -out test.key 1024
这里-out指定生成文件的。需要注意的是这个文件包含了公钥和密钥两部分，也就是说这个文件即可用来加密也可以用来解密。后面的1024是生成密钥的长度。

openssl可以将这个文件中的公钥提取出来：
openssl rsa -in test.key -pubout -out test_pub.key
-in指定输入文件，-out指定提取生成公钥的文件名。至此，我们手上就有了一个公钥，一个私钥（包含公钥）。现在可以将用公钥来加密文件了。

我在目录中创建一个hello的文本文件，然后利用此前生成的公钥加密文件：
openssl rsautl -encrypt -in hello -inkey test_pub.key -pubin -out hello.en
-in指定要加密的文件，-inkey指定密钥，-pubin表明是用纯公钥文件加密，-out为加密后的文件。
解密文件：
openssl rsautl -decrypt -in hello.en -inkey test.key -out hello.de
-in指定被加密的文件，-inkey指定私钥文件，-out为解密后的文件。
至此，一次加密解密的过程告终。在实际使用中还可能包括证书，这个以后有机会再说~
-------------------------------------------------------------------------------------------------------------------
下来介绍下在程序如何利用之前生成的test.key和test_pub.key来进行信息的加密与解密（当然也可以直接利用openssl的API来生成密钥文件）。
下面是一个例子，这个例子利用已有的密钥来对source字符串进行加密与解密：
1#include<stdio.h>
2#include<stdlib.h>
3#include<string.h>
4#include<openssl/rsa.h>
5#include<openssl/pem.h>
6#include<openssl/err.h>
7#defineOPENSSLKEY "test.key"
8#definePUBLICKEY "test_pub.key"
9#defineBUFFSIZE 1024
10char* my_encrypt(char*str,char*path_key);//加密
11char* my_decrypt(char*str,char*path_key);//解密
12intmain(void){
13char*source="i like dancing !";
14char*ptr_en,*ptr_de;
15printf("source is :%s\n",source);
16ptr_en=my_encrypt(source,PUBLICKEY);
17printf("after encrypt:%s\n",ptr_en);
18ptr_de=my_decrypt(ptr_en,OPENSSLKEY);
19printf("after decrypt:%s\n",ptr_de);
20if(ptr_en!=NULL){
21free(ptr_en);
22}
23if(ptr_de!=NULL){
24free(ptr_de);
25}
26return0;
27}
28char*my_encrypt(char*str,char*path_key){
29char*p_en;
30RSA *p_rsa;
31FILE *file;
32intflen,rsa_len;
33if((file=fopen(path_key,"r"))==NULL){
34perror("open key file error");
35returnNULL;
36}
37if((p_rsa=PEM_read_RSA_PUBKEY(file,NULL,NULL,NULL))==NULL){
38//if((p_rsa=PEM_read_RSAPublicKey(file,NULL,NULL,NULL))==NULL){ 换成这句死活通不过，无论是否将公钥分离源文件
39ERR_print_errors_fp(stdout);
40returnNULL;
41}
42flen=strlen(str);
43rsa_len=RSA_size(p_rsa);
44p_en=(unsigned char*)malloc(rsa_len+1);
45memset(p_en,0,rsa_len+1);
46if(RSA_public_encrypt(rsa_len,(unsigned char*)str,(unsigned char*)p_en,p_rsa,RSA_NO_PADDING)<0){
47returnNULL;
48}
49RSA_free(p_rsa);
50fclose(file);
51returnp_en;
52}
53char*my_decrypt(char*str,char*path_key){
54char*p_de;
55RSA *p_rsa;
56FILE *file;
57intrsa_len;
58if((file=fopen(path_key,"r"))==NULL){
59perror("open key file error");
60returnNULL;
61}
62if((p_rsa=PEM_read_RSAPrivateKey(file,NULL,NULL,NULL))==NULL){
63ERR_print_errors_fp(stdout);
64returnNULL;
65}
66rsa_len=RSA_size(p_rsa);
67p_de=(unsigned char*)malloc(rsa_len+1);
68memset(p_de,0,rsa_len+1);
69if(RSA_private_decrypt(rsa_len,(unsigned char*)str,(unsigned char*)p_de,p_rsa,RSA_NO_PADDING)<0){
70returnNULL;
71}
72RSA_free(p_rsa);
73fclose(file);
74returnp_de;
75}
一个比较奇怪的问题：
37、38行中为从文件中获取密钥，发现如果使用openssl提供的PEM_read_RSAPublicKey方法会一直失败。
估计是文件格式的问题~